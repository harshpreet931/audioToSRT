name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${context.ref.replace('refs/tags/', '')}`,
              name: `Audio to SRT ${context.ref.replace('refs/tags/', '')}`,
              body: `Release ${context.ref.replace('refs/tags/', '')} of Audio to SRT\n\n## What's New\n- Bug fixes and improvements\n- Performance optimizations\n\n## Download\nChoose the appropriate file for your platform:\n- **macOS**: \`.dmg\` file\n- **Windows**: \`.msi\` installer\n- **Linux**: \`.AppImage\` or \`.deb\` package`,
              draft: false,
              prerelease: false
            })
            return data.id

  build-and-upload:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS Universal'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './audio-to-srt-app/package-lock.json'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './audio-to-srt-app/src-tauri -> target'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            ffmpeg

      - name: Install macOS Dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          brew install ffmpeg

      - name: Install Windows Dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          # Download and install FFmpeg for Windows
          $ffmpegUrl = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          $ffmpegZip = "$env:TEMP\ffmpeg.zip"
          $ffmpegDir = "$env:TEMP\ffmpeg"
          Invoke-WebRequest -Uri $ffmpegUrl -OutFile $ffmpegZip
          Expand-Archive -Path $ffmpegZip -DestinationPath $ffmpegDir -Force
          $ffmpegBin = Get-ChildItem -Path $ffmpegDir -Filter "ffmpeg.exe" -Recurse | Select-Object -First 1
          $env:PATH += ";$($ffmpegBin.Directory.FullName)"
          echo "$($ffmpegBin.Directory.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Frontend Dependencies
        run: |
          cd audio-to-srt-app
          npm ci

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './audio-to-srt-app'
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  finalize-release:
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Finalize Release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            })